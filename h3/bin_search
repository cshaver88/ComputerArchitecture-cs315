# File:      bin_search
# Purpose:   Binary search through list and find key if there
#
# Input:     Number of ints in list (n)
#            Elements of list (one element per line)
#	     Number to look for in list (key)
# Output:    location of the key if found if not -1
# 
# Note:      list is statically allocated on the stack
        .text
        .globl  main
main:
        addi    $sp, $sp, -416          # Make additional stack space.
                                        #   3 words for $ra, $s0, $s1
                                        #   100 words for list
        sw      $ra, 412($sp)           # Put contents of $ra on stack
        sw      $s0, 408($sp)           # Put $s0 on stack list
        sw      $s1, 404($sp)           # Put $s1 on stack n
        sw      $s2, 400($sp)           # Put $s2 on stack key
        move    $s0, $sp                # start address of list = $s0

        # Ask the OS to read a number and put it in $s1 = n
        li      $v0, 5                  # Code for read int.
        syscall                         # Ask the system for service.
        move    $s1, $v0                # Put the input value (n) in a safe
                                        #    place

        # Now read in the list
        move    $a0, $s0                # First arg is list
        move    $a1, $s1                # Second arg is n
        jal     rd_lst

        # Now sort the list
        move    $a0, $s0                # First arg is list
        move    $a1, $s1                # Second arg is n
        jal     selsrt

        #Ask for a number to look for 
        li     $v0, 5          		#read the int
        syscall                 	#ask for service
        move    $s2, $v0        	#place the key into s2 so it doesn't get lost
        jal       bin_search      	#go to the search function

        li      $v0, 10                 # For MARS
        syscall


        ###############################################################
        # Binary_Search function
        #    $a0 is the address of the beginning of list (In/out)
        #    $a1 is n (In)
        #    $a2 is key
bin_search:
        #Setup
        addi    $sp, $sp, -4            # Make space for return address
        sw      $ra, 0($sp)             # Save return address

        li      $t0, 0                  # the bottom
        li      $t1, 1                  # the top
        li      $t2, 0                  # the middle
        addi    $t1, $a1, -1           # calculate n-1

        #while loop-- bottom less equal to top
test:        
	bgt     $t0, $t1, wrong    
        add     $t2, $t1, $t0           #set mid to top + bottom
        srl     $t2, $t2, 1             #shift mid 1 to right
        
        #if key == A[mid]
        # you have a0 as base adress of the list
        #you have t2 as index you want to look at
        #you sll*2 THEN YOU ADD IT TO A0 AND THEN YOU USE LW
        sll 	$t3, $t2, 2	#index
        add	$t4, $t3, $a0	#address
        lw	$t5, 0($t4)	#value  t2 mid index
        bne     $a2, $t5, else_if       #if key(a2) == a[index]
        move    $a0, $t3
        j	done
                            
            
else_if:
        #key < A[mid]
        bgt     $a2, $t5, else          #if key(a2) < a[t3 index]
        addi    $t1, $t2, -1            #add mid(t2)-1 to top(t1)
        j       test              #go back to top of loop

else:
        #otherwise key is > A[mid]
        addi    $t0, $t2, 1            #add mid(t2)+1 to bottom(t0)
        j       test
wrong:	
	li $a0, -1
done:
        # Now print the list
        move    $a0, $s0                # First arg is list
        move    $a1, $s1                # Second arg is n


        # Prepare for return
        lw      $ra, 412($sp)           # Retrieve return address
        lw      $s0, 408($sp)           # Retrieve $s0
        lw      $s1, 404($sp)           # Retrieve $s1
        lw      $s2, 400($sp)           # Retrieve $s2
        addi    $sp, $sp, 412           # Make additional stack space
	jr 	$ra




        ###############################################################
        # Read_list function
        #    $a0 is the address of the beginning of list (In/out)
        #    $a1 is n (In)
        # Note:  $a0 isn't changed:  the block of memory it refers
        #    to is changed
rd_lst: 
        # Setup
        addi    $sp, $sp, -4            # Make space for return address
        sw      $ra, 0($sp)             # Save return address

        # Main for loop
        move    $t0, $zero              # $t0 = i = 0
rd_tst: bge     $t0, $a1, rddone        # If  i = $t0 >= $a1 = n 
                                        #    branch out of loop.
                                        #    Otherwise continue.
        li      $v0, 5                  # Code for read int.
        syscall                         # Ask the system for service.
        sll     $t1, $t0, 2             # Words are 4 bytes:  use 4*i, not i
        add     $t1, $a0, $t1           # $t1 = list + i
        sw      $v0, 0($t1)             # Put the input value in $v0 in
                                        #    list[i]
        addi    $t0, $t0, 1             # i++
        j       rd_tst                  # Go to the loop test
        
        # Prepare for return
rddone: lw      $ra, 0($sp)             # retrieve return address
        addi    $sp, $sp 4              # adjust stack pointer
        jr      $ra                     # return


        ###############################################################
        # Print_list function
        #    $a0 is the address of the beginning of list (In)
        #    $a1 is n  (In)
pr_lst: 
        # Setup
        addi    $sp, $sp, -4            # Make space for return address
        sw      $ra, 0($sp)             # Save return address

        # Main for loop
        move    $t2, $a0                # Need $a0 for syscall:  so
                                        #    copy to t2
        move    $t0, $zero              # $t0 = i = 0
pr_tst: bge     $t0, $a1, prdone        # If  i = $t0 >= $a1 = n 
                                        #    branch out of loop.
                                        #    Otherwise continue.
        sll     $t1, $t0, 2             # Words are 4 bytes:  use 4*i, not i
        add     $t1, $t2, $t1           # $t1 = list + i
        lw      $a0, 0($t1)             # Put the value to print in $a0
        li      $v0, 1                  # Code for print int.
        syscall

        # Print a space 
        la      $a0, space              # 
        li      $v0, 4                  # Code for print string
        syscall

        addi    $t0, $t0, 1             # i++
        j       pr_tst                  # Go to the loop test
        
        # print a newline
prdone: 
        la      $a0, newln
        li      $v0, 4                  # code for print string
        syscall

        # Prepare for return
        lw      $ra, 0($sp)             # retrieve return address
        addi    $sp, $sp 4              # adjust stack pointer
        jr      $ra                     # return


        ###############################################################
        # Sel_sort function
        #    $a0 is the address of the beginning of list (In/out)
        #    $a1 is n
        # Note:  $a0 isn't changed:  the block of memory it refers
        #    to is changed
selsrt:
        # Setup
        addi    $sp, $sp, -24           # Make space for registers
        sw      $ra, 20($sp)            # Save return address
        sw      $s0, 16($sp)            # We'll be using $s0, $s1,
        sw      $s1, 12($sp)            #    $s2, $s3, $s4.  To avoid
        sw      $s2,  8($sp)            #    trashing current contents
        sw      $s3,  4($sp)            #    put onto stack.
        sw      $s4,  0($sp)            #    

        # We'll be using $a0, $a1 in function calls
        move    $s0, $a0                # $s0 is list
        move    $s1, $a1                # $s1 is n

        # Main for loop
        addi    $s3, $s1, -1            # Terminate when i >= n-1 = $s3
        move    $s2, $zero              # $s2 = i = 0
lp_tst: bge     $s2, $s3, lpdone        # If  i = $s2 >= $s3 = n-1
                                        #    branch out of loop.
                                        #    Otherwise continue.

        # Find smallest element
        move    $a0, $s0                # First arg is list
        move    $a1, $s2                # Second arg is i
        move    $a2, $s3                # Third arg is n-1
        jal     locmin                  # Call Loc_min function
        move    $s4, $v0                # Put j in a safe place

        # Swap list[i] and list[j]
        move    $a0, $s0                # list
        move    $a1, $s2                # i
        move    $a2, $s4                # Last arg is subscript returned 
                                        #    by Loc_min = j
        jal     swap                    # Call Swap function

        # Increment i
        addi    $s2, $s2, 1             # i++
        j       lp_tst                  # Go to the loop test
        
        # Prepare for return
lpdone: lw      $ra, 20($sp)            # Retrieve return address
        lw      $s0, 16($sp)            # Retrieve $s0
        lw      $s1, 12($sp)            # Retrieve $s1
        lw      $s2,  8($sp)            # Retrieve $s2
        lw      $s3,  4($sp)            # Retrieve $s3
        lw      $s4,  0($sp)            # Retrieve $s4
        addi    $sp, $sp, 24            # Adjust stack pointer
        jr      $ra                     # return

        
        ###############################################################
        # Loc_min function
        #    $a0 is the address of the beginning of the list (In)
        #    $a1 is first  (In) 
        #    $a2 is last   (In)
        #
        # Return val 
        #    $v0 = subscript of smallest element from list[first]
        #        to list[last], inclusive
locmin:
        # Get min_loc and list[min_loc]
        move    $t0, $a1                # Current min is in list[first]
                                        #    first = $a1, $t0 = min_loc
        sll     $t3, $t0, 2             # $t0 counts ints, $t3 counts bytes
        addu    $t3, $t3, $a0           # $t3 is now an absolute address
        lw      $t5, 0($t3)             # Current min is in $t5

        # Start for loop
        addi    $t1, $a1, 1             # k = Loop var = $t1.  Start
                                        #    at first+1
lm_lp:  bgt     $t1, $a2, lmdone        # When k = $t1 > $a2 = last, break
                                        #    out of loop
        # Load list[k]
        sll     $t2, $t1, 2             # $t1 counts ints, $t2 counts bytes
        addu    $t2, $a0, $t2           # $t2 is address of list[k]
        lw      $t4, 0($t2)             # $t4 = list[k]

        bge     $t4, $t5, no_chg        # Go to no_chg if $t4 >= $t5, i.e.,
                                        #    list[k] >= list[min_loc]
        move    $t0, $t1                # Set min_loc = $t0 to $t1 = k
        move    $t5, $t4                # Set curr min = $t5 to $t4 = 
                                        #     list[k]

no_chg: addi    $t1, $t1, 1             # k++
        j       lm_lp

lmdone: move    $v0 $t0                 # Set return val = min_loc
        jr      $ra                     # Return


        ###############################################################
        # Swap function
        #    Swap list[i] and list[j]
        #    $a0 is the address of the beginning of list (In/out)
        #    $a1 is i  (In) 
        #    $a2 is j  (In)
        # Note:  $a0 isn't changed:  elements in the block it refers
        #    to are swapped
swap:
        # Load list[i] into $t1
        sll     $t0, $a1, 2             # $a1 counts ints, $t0 bytes
        add     $t0, $a0, $t0           # $t0 is address of list[i]
        lw      $t1, 0($t0)             # $t1 is list[i]

        # Load list[j] into $t3
        sll     $t2, $a2, 2             # $a2 counts ints, $t2 bytes
        add     $t2, $a0, $t2           # $t2 is address of list[j]
        lw      $t3, 0($t2)             # $t3 is list[j]

        # Store $t1 in list[j] and $t3 in list[i]
        sw      $t1, 0($t2)             # Store list[i] in list[j]
        sw      $t3, 0($t0)             # Store list[j] in list[i]

        # Return
        jr      $ra


        ###############################################################
        # Data
        .data
space:  .asciiz " "
newln:  .asciiz "\n"