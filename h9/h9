Cayla Shaver
Architecture
CS-315
H9


4.1 Consider the following instructions 
	Instruction:  AND Rd, Rs, Rt
	Interpretation: Reg[Rd] = Reg[Rs] AND Ref[Rt]


	.1 What are the values of control signals generated by the control in Fig 4.2 for the above instruction?

	.1 Answer:
		 Control:
		 	RegWrite has a High signal since it is being 		used
		 	MemRead has a Low signal since it is not being 		used
		 	Bottom MUX has has a High signal since it is being used
		 	MemWrite has a Low signal since it is not being 	used
		 	ALU has a High signal since it is being used
		 	Middle MUX has a High signal since it is being used
		 	Top MUX has a High signal since it is being used

	.2 Which resources (blocks) perform a useful function for this instruction?
		All of the blocks except for the Data Memory block


	.3 Which resources (blocks) produce outputs, but their outputs are not used for this instruction? Which resources produce no outputs for this instruction?
		Data Memory MemWrite produce output but they aren't used.
		Registers RegWrite produces no output.


4.2 The basic single cycle MIPS implementation in Fig 4.2 can only implement some instructions. New instructions can be added to an existing ISA, but that decision whether or not to do that depends, among other things on the cost and complexity the proposed addition introduces into the processor datapath and control.  

Instruction: LWI Rt, Rd(Rs)
Interpretation: Reg[Rt] = Mem[Reg[Rd] + Reg[Rs]]

	.1 Which existing blocks (if any) can be used for this instruction?
		All of the blocks are needed except for the 2nd Add block.

	.2 Which new functional blocks(if any) do we need for this instruction?
		none.

	.3 What new signals do we need (if any) from the control unit to support this instruction?
		none.


4.8 In this exercise, we examine how piplining affects the clock cycle time of the processor. Problems in this exercise assume that individual stages of the datapath have the following latencies:

IF 			ID 			EX 			MEM 		WB
250ps		350ps		150ps 		300ps 		200ps

Also assume that instructions executed by the processor are broken down as follows:

alu 		beq 		lw 			sw
45% 		20% 		20%  		15%

	.1 What is the clock cycle time in a pipelined and non-pipelined processor?
		1250ps = unpiplined
		350ps = pipelined

	.2 What is the total latency of an LW instruction in a pipelined and non-pipelined processor?

		250ps = unpiplined
		1750ps = pipelined

	.3 If we can split one stage of the pipelined datapath into two new stages, each with half the latency of the original stage, which stage would you split and what is the new clock cycle time of the processor?
		Split the ID 350ps stage then you get:
		300ps = pipelined		

	.4 Assuming there are no stalls or hazards, what is the utilization of the data memory?
		35% utilization

	.5 Assume there are no stalls or hazards, what is the utilization of the write-register port of the "Registers" unit?
		65% utilization

	.6 Instead of a single-cycle organization, we can use a multi-cycle organization where each instruction takes multiple cycles but one instruction finishes before another is fetched. In this organization an instruction only goes through stages it actually needs(e.g., ST only takes 4 cycles because it does not need the WB stage). Compare clock cycle times and execution times with single-cycle, multi-cycle, and pipelined organization. You should assume that in the multi-cycle implementation, every cycle has the same length, but different instructions only use the cycles they need. (For example, sw only uses 4 cycles.) For each of the three implementations (single-cycle, multi-cycle, and pipelined) find the minimum and maximum possible execution times for a program that executes 1,000,000 instructions distributed as indicated in the table.
		
		Single Cycle:
			alu = 1,000,000 * .45 * 1250ps = 562,500,000ps
			beq = 1,000,000 * .20 * 1250ps = 250,000,000ps
			lw = 1,000,000 * .20 * 1250ps = 250,000,000ps
			sw = 1,000,000 * .15 * 1250ps = 187,500,000ps
		
		Multi Cycle:
			alu = 1,000,000 * .45 * 950ps = 427,500,000ps
			beq = 1,000,000 * .20 * 750ps = 150,000,000ps
			lw = 1,000,000 * .20 * 1250ps = 250,000,000ps
			sw = 1,000,000 * .15 * 1050ps = 157,500,000ps

		Pipelined:
			5(350) + 350(1,000,000 - 1) = 350,001,400ps 


